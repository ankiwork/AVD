################################################################################
# Makefile for MCQ/D devices
################################################################################
#This file has to be generated by C Editor
include srcList.mk

#Optional user suplied makefile
-include user.mk

#output directories
BUILDDIR = .build
KEYDIR = .keypair
DEPDIR = .dep

GDSPATH := $(subst \,/,$(GDSPATH))

export PATH := $(PATH);$(GDSPATH)/bin/compiler/i686-w64-mingw32/bin

################################################################################
# List of C/C++ source files
################################################################################
SRC_C = $(notdir $(filter %.c,$(SRC)))
SRC_CPP = $(notdir $(filter %.cpp,$(SRC)))

################################################################################
# Path to compiler/linker/tools/...
################################################################################
ECHO    := $(GDSPATH)/bin/gnu/echo.exe
MKDIR   := $(GDSPATH)/bin/gnu/mkdir
RM      := $(GDSPATH)/bin/gnu/rm
CP      := $(GDSPATH)/bin/gnu/cp
CCW32   := $(GDSPATH)/bin/compiler/i686-w64-mingw32/bin/i686-w64-mingw32-gcc.exe
CPPCW32 := $(GDSPATH)/bin/compiler/i686-w64-mingw32/bin/i686-w64-mingw32-g++.exe

#additional library directories
LIBDIRS += ./SYS

################################################################################
# Stuff to generating key pair (except QNX)
################################################################################
ifneq (arm, $(ARCH))
    GS_SSH_KEY_GEN      := ./SYS/.gpes/gsSSHKeyGen.exe
    GS_SSH_KEY_GEN_OPTS += -s
    GS_SSH_KEY_GEN_OPTS += -f $(KEYDIR)/$(TARGET)
endif

################################################################################
# Stuff used for compiling the project for Linux based targets
################################################################################
ifeq ($(ARCH),$(filter $(ARCH),armv5 armv7 armv8))

    ifeq (armv8, $(ARCH))
        GCC_PREFIX := aarch64-gs-linux-gnu
        GCC_DIR := 9/
        LIBS_SYS := pthread dl rt
    endif

    ifeq (armv7, $(ARCH))
        GCC_PREFIX := arm-gs-linux-gnueabihf
        LIBS_SYS := pthread dl rt
    endif

    ifeq (armv5, $(ARCH))
        GCC_PREFIX := arm-gs-linux-uclibcgnueabi
        LIBS_SYS := pthread dl

        #Hack! When gsQuBusS is used we need to link against uio-so on armv5
        ifeq (gsQuBusS,$(filter $(LIBS),gsQuBusS))
            LIBS_SYS += uio-so
            LIBDIRS += ./SYS/armv5
        endif

    endif

    BUILD_CHECKER = ./SYS/.gpes/gsBuildChecker.exe
    CROSS_COMPILE = $(GDSPATH)/bin/compiler/$(GCC_DIR)$(GCC_PREFIX)/bin/$(GCC_PREFIX)-
    CC = $(CROSS_COMPILE)gcc
    CPPC = $(CROSS_COMPILE)g++
    LD = $(CPPC)
    OBJCOPY = $(CROSS_COMPILE)objcopy
    STRIP = $(CROSS_COMPILE)strip

    LIBS_LIST_TGT := $(addprefix -l, $(addsuffix _$(ARCH), $(LIBS)) $(LIBS_SYS))

    LDFLAGS += $(filter %.o,$(ADDOBJ))
    LDFLAGS += -Wl,--cref,-Map,$(BUILDDIR)/$(TARGET).map
    LDFLAGS += -shared $(patsubst %,-L%,$(LIBDIRS))
    LDFLAGS += -Wl,--warn-common
    LDFLAGS += -Wl,--start-group $(LIBS_LIST_TGT) -Wl,--end-group
    LDFLAGS += -Wl,-soname,$@
endif

################################################################################
# Stuff used for compiling the project for QNX based targets
################################################################################
ifeq (arm, $(ARCH))
    GCC_PREFIX := arm-elf

    CC = $(GDSPATH)/bin/compiler/arm-gcc/bin/$(GCC_PREFIX)-gcc
    LD = $(GDSPATH)/bin/compiler/arm-gcc/bin/$(GCC_PREFIX)-ld
    OBJCOPY = $(GDSPATH)/bin/compiler/arm-gcc/bin/$(GCC_PREFIX)-objcopy
    STRIP = $(GDSPATH)/bin/compiler/arm-gcc/bin/$(GCC_PREFIX)-strip

    CFLAGS += -mcpu=arm926ej-s
    CFLAGS += -msoft-float
    CFLAGS += -mfpu=vfp
    CFLAGS += -nostdinc

    INCDIRS += ./SYS/nto-compat

    LIBS_LIST_TGT = $(addprefix -l, $(LIBS) gcc)

    LDFLAGS += -soname $@
    LDFLAGS += --cref
    LDFLAGS += -Map $(BUILDDIR)/$(TARGET).map
    LDFLAGS += -shared
    LDFLAGS += $(patsubst %,-L%,$(LIBDIRS))
    LDFLAGS += -L$(GDSPATH)/bin/compiler/arm-gcc/lib
    LDFLAGS += $(filter %.o,$(ADDOBJ))
    LDFLAGS += --warn-common
    LDFLAGS += --start-group $(LIBS_LIST_TGT) --end-group
endif

################################################################################
# Additional include directories
################################################################################
INCDIRS += ./SYS
INCDIRS += $(patsubst %/,%,$(subst \,/,$(sort $(sort $(dir $(SRC))))))

################################################################################
# Flags passed to the C/C++ compiler for both the target and win32
################################################################################

#C
C_FLAGS_COMMON += -Werror-implicit-function-declaration
C_FLAGS_COMMON += -Wold-style-definition
C_FLAGS_COMMON += -Wstrict-prototypes
C_FLAGS_COMMON += -std=gnu99

#C++
CPP_FLAGS_COMMON += -std=c++11

#C/C++
C_CPP_FLAGS_COMMON += -DGDSPROJECT
C_CPP_FLAGS_COMMON += -DCURL_DISABLE_TYPECHECK
C_CPP_FLAGS_COMMON += -DCURL_STATICLIB
C_CPP_FLAGS_COMMON += -pedantic
C_CPP_FLAGS_COMMON += -Wall
C_CPP_FLAGS_COMMON += -Wextra
C_CPP_FLAGS_COMMON += -Wno-long-long
C_CPP_FLAGS_COMMON += -Winit-self
C_CPP_FLAGS_COMMON += -Wfloat-equal
C_CPP_FLAGS_COMMON += -Wshadow
C_CPP_FLAGS_COMMON += -Wcast-qual
C_CPP_FLAGS_COMMON += -Wcast-align
C_CPP_FLAGS_COMMON += -Wno-unused-parameter
C_CPP_FLAGS_COMMON += $(patsubst %,-I%,$(INCDIRS))

################################################################################
# Flags passed to the C/C++ compiler for the target
################################################################################
CFLAGS += -O2
CFLAGS += -fvisibility=hidden
CFLAGS += -fpic
CFLAGS += $(C_FLAGS_COMMON)
CFLAGS += $(C_CPP_FLAGS_COMMON)
CFLAGS += $(C_FLAGS_USER)

CPPFLAGS += -O2
CPPFLAGS += -fvisibility=hidden
CPPFLAGS += -fpic
CPPFLAGS += $(CPP_FLAGS_COMMON)
CPPFLAGS += $(C_CPP_FLAGS_COMMON)
CPPFLAGS += $(CPP_FLAGS_USER)

################################################################################
# Flags passed to the WIN32 C/C++ compiler
################################################################################
CFLAGSW32  = -g
CFLAGSW32 += $(C_FLAGS_COMMON)
CFLAGSW32 += $(C_CPP_FLAGS_COMMON)
CFLAGSW32 += $(C_FLAGS_USER)

CPPFLAGSW32  = -g
CPPFLAGSW32 += $(CPP_FLAGS_COMMON)
CPPFLAGSW32 += $(C_CPP_FLAGS_COMMON)
CPPFLAGSW32 += $(CPP_FLAGS_USER)

################################################################################
# Flags for GCC (dependency generation)
################################################################################
DEPFLAGS += -MD -MP -MT $@ -MF $(DEPDIR)/$(notdir $@).d

################################################################################
# Flags passed to the linker for win32
################################################################################
ifeq ($(BUILDWIN32), 1)
    LIBS_LIST_W32 = $(addprefix -l, $(addsuffix _win32, $(LIBS)) pthread-dll stdc++ ws2_32 iphlpapi)

    LDFLAGSW32 = -Wl,--export-all-symbols
    LDFLAGSW32 += -Wl,--warn-common
    LDFLAGSW32 += $(patsubst %,-L%,$(LIBDIRS))
    LDFLAGSW32 += -L ./sys $(OBJW32) $(filter %.ow32,$(ADDOBJ))
    LDFLAGSW32 += -Wl,--start-group $(LIBS_LIST_W32) -Wl,--end-group
endif

# Define all object files.
OBJ = $(addprefix $(BUILDDIR)/, $(addsuffix .o, $(basename $(SRC_C) $(SRC_CPP))))
OBJW32 = $(addprefix $(BUILDDIR)/, $(addsuffix .ow32, $(basename $(SRC_C) $(SRC_CPP))))

vpath %.c $(subst \,/,$(dir $(filter %.c,$(SRC))))
vpath %.cpp $(subst \,/,$(dir $(filter %.cpp,$(SRC))))

# Default target.
ifeq ($(BUILDWIN32), 1)
all: so dll sobin dllbin end
else
all: so sobin end
endif

begin:
	@$(ECHO) "### Building UserC for $(TARGET) ###"
	@$(MKDIR) -p $(DEPDIR)
	@$(MKDIR) -p $(BUILDDIR)
	@$(MKDIR) -p $(KEYDIR)

ifeq ($(BUILDWIN32), 1)
end: | sobin dllbin
else
end: | sobin
endif
	@$(ECHO) "### Done ###"

so: $(BUILDDIR)/$(TARGET).so
dll: $(BUILDDIR)/$(TARGET).dll

sobin: so
    ifdef BUILD_CHECKER
		@$(ECHO) BC $(TARGET).so
		@$(BUILD_CHECKER) -c $(CROSS_COMPILE) -d $(CURDIR)/$(BUILDDIR) -p $(TARGET)
    endif
    ifdef GS_SSH_KEY_GEN
		@$(ECHO) KG $(TARGET)
		@$(GS_SSH_KEY_GEN) $(GS_SSH_KEY_GEN_OPTS)
    endif
	@$(ECHO) CV $(TARGET).so
	@$(CP) $(BUILDDIR)/$(TARGET).so USERPROG.BIN
	@$(STRIP) --strip-unneeded USERPROG.BIN

dllbin: dll
	@$(ECHO) CV $(TARGET).dll
	@$(CP) $(BUILDDIR)/$(TARGET).dll USERPROG.WIN32.BIN

# Link: create ELF output file from object files.
$(BUILDDIR)/%.so: $(OBJ)
	@$(ECHO) LD $(notdir $^)
	@$(LD) $^ $(LDFLAGS) -o $@

$(BUILDDIR)/%.dll: $(OBJW32)
	@$(ECHO) LDW32 $(notdir $^)
	@$(CCW32) -g -shared $(LDFLAGSW32) -o $@

# Compile: create object files from C source files.
$(BUILDDIR)/%.o : %.c | begin
	@$(ECHO) CC $(notdir $<)
	@$(CC) -c $(CFLAGS) $(DEPFLAGS) -o $@ $<

# Compile: create object files from C++ source files.
$(BUILDDIR)/%.o : %.cpp | begin
	@$(ECHO) CC $(notdir $<)
	@$(CPPC) -c $(CPPFLAGS) $(DEPFLAGS) -o $@ $<

# Compile: create WIN32 object files from C source files.
$(BUILDDIR)/%.ow32 : %.c | begin
	@$(ECHO) CCW32 $(notdir $<)
	@$(CCW32) -c $(CFLAGSW32) -o $@ $<

# Compile: create WIN32 object files from C++ source files.
$(BUILDDIR)/%.ow32 : %.cpp | begin
	@$(ECHO) CCW32 $(notdir $<)
	@$(CPPCW32) -c $(CPPFLAGSW32) -o $@ $<

# Target: clean project.
clean:
	@$(ECHO) "### Removing build files ###"
	@$(RM) -rf $(DEPDIR)
	@$(RM) -rf $(BUILDDIR)
	@$(ECHO) "### Done ###"

# Include the dependency files.
-include $(wildcard $(DEPDIR)/*)

# Listing of phony targets.
.PHONY : all begin clean end
.PRECIOUS : $(OBJ) $(OBJW32)